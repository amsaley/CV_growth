rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Periostracum/")
dat = read_xlsx("Fulldata.xlsx")
View(dat)
plot(dat$`umol per hour` ~ dat$`peri.sa%`)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Periostracum/")
dat = read_xlsx("Fulldata.xlsx")
library(readxl)
dat = read_xlsx("Fulldata.xlsx")
plot(dat$`umol per hour` ~ dat$`peri.sa%`)
unique(dat$sanding)
fine = dat[dat$sanding == "fine",]
coarse = dat[dat$sanding == "coarse",]
none = dat[dat$sanding == "none",]
plot(fine$`umol per hour`)
boxplot(fine$`umol per hour`)
boxplot(dat$`umol per hour` ~ dat$sanding)
rm(list=ls())
library(openxlsx)
library(openxlsx)
library(seacarb)
library(marelac)
library(scales)
library(CHNOSZ)
library(cmocean)
install.packages(cmocean)
install.packages("cmocean")
library(lubridate)
library(grDevices)
library(lattice)
library(plyr)
library(pBrackets)
install.packages('pBrackets')
library(MASS)
library(AICcmodavg)
install.packages('AICcmodavg')
library(lmtest)
install.packages('lmtest')
library(lmerTest)
library(MuMIn)
se = function(x){sd(na.omit(x))/sqrt(length(na.omit(x)))}
ploterry = function(x,y,err,col=1){arrows(x,y-err,x,y+err,length=0,angle=90,code=3,col=col)}
ploterrx = function(x,y,err,col=1){arrows(x-err,y,x+err,y,length=0,angle=90,code=3,col=col)}
se = function(x){sd(na.omit(x))/sqrt(length(na.omit(x)))}
na.mean = function(x){mean(na.omit(x))}
na.length = function(x){length(na.omit(x))}
library(rstudioapi)
dir = dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(dir)
dat = read.csv('incubation_data.csv',header=TRUE)
dat$normcalc = (-0.5*(dat$delta.ta-dat$delta.nh3)*dat$incubation.water.mass - dat$calc.diss)/dat$duration/dat$tissue.mass^0.71592
plot(dat$normcalc,dat$calcification);abline(0,1)
dat = read.csv('incubation_data.csv',header=TRUE)
dat$normcalc = (-0.5*(dat$delta.ta-dat$delta.nh3)*dat$incubation.water.mass - dat$calc.diss)/dat$duration/dat$tissue.mass^0.71592
plot(dat$normcalc,dat$calcification);abline(0,1)
calclabel = expression(paste('Calcification Rate (',mu,'mol ',CaCO[3],' hr'^-1,' g'^-0.72,')'))
omalabel = expression(paste(Omega['aragonite']))
bicarblabel = expression(paste(paste("","HCO")[3]^"-",' (mmol k',g^'-1',')'))
logomalabel = expression(paste('log(',Omega['aragonite'],')'))
phlabel = expression(paste('pH'['total']))
pco2label = expression(paste(pCO[2]))
alklabel = expression(paste('Alkalinity ( ',mu,'mol ',kg^-1,')'))
normcalclabel = bquote(atop(paste('Calcification Rate'),paste('(',mu,'mol ',CaCO[3],' hr'^-1,' g'^-0.72,')')))
sirlabel = expression(paste(paste('SIR ([HCO')[3]^'-','] [H]'^'-1',') X ',10^-5))
musscalclabel = bquote(atop(paste('Calcification Rate'),paste('(',mu,'mol ',CaCO[3],' hr'^-1,' mussel'^-1,')')))
calabel = expression(paste('[C',a^'2+','] (mmol ',L^'-1',')'))
sallabel = 'Salinity'
delalklabel = expression(paste('Alkalinity Change ( ',mu,'mol h',r^'-1',')'))
par(ps=12)
windowsFonts(Times = windowsFont("Times New Roman"))
windowFonts??
??windowFonts
install.packages('grDevices')
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
(Times = windowsFont("Times New Roman"))
install.packages("grDevices")
install.packages("grDevices")
install.packages(c("backports", "BH", "BiocManager", "blob", "brew", "brio", "broom", "bslib", "callr", "CHNOSZ", "class", "classInt", "cli", "clipr", "cluster", "colorspace", "commonmark", "covr", "cpp11", "crayon", "credentials", "crosstalk", "crul", "data.table", "dataRetrieval", "DBI", "dbplyr", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "EnvStats", "estimability", "evaluate", "fansi", "farver", "fields", "fitdistrplus", "fontawesome", "forcats", "foreign", "formatR", "fs", "gargle", "gdtools", "generics", "geojsonsf", "gert", "ggplot2", "gh", "git2r", "git2rdata", "gitcreds", "glmmML", "glue", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "irlba", "jsonlite", "knitr", "leafem", "leaflet", "lifecycle", "lme4", "lubridate", "magrittr", "maptools", "mapview", "MASS", "Matrix", "matrixStats", "memoise", "mgcv", "mime", "minpack.lm", "mockery", "modelr", "mvtnorm", "ncdf4", "nlme", "nloptr", "nnet", "oce", "ocedata", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "processx", "proxy", "ps", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "remotes", "reprex", "rerddap", "reshape", "rex", "rgdal", "rjson", "rlang", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rversions", "rvest", "sass", "satellite", "scales", "seacarb", "servr", "sessioninfo", "sf", "shiny", "sitmo", "snow", "sp", "spam", "spatial", "statmod", "stringi", "stringr", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "units", "usethis", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "webshot", "withr", "wk", "wql", "xfun", "xml2", "yaml", "zip", "zoo"))
install.packages(c("backports", "BH", "BiocManager", "blob", "brew", "brio", "broom", "bslib", "callr", "CHNOSZ", "class", "classInt", "cli", "clipr", "cluster", "colorspace", "commonmark", "covr", "cpp11", "crayon", "credentials", "crosstalk", "crul", "data.table", "dataRetrieval", "DBI", "dbplyr", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "EnvStats", "estimability", "evaluate", "fansi", "farver", "fields", "fitdistrplus", "fontawesome", "forcats", "foreign", "formatR", "fs", "gargle", "gdtools", "generics", "geojsonsf", "gert", "ggplot2", "gh", "git2r", "git2rdata", "gitcreds", "glmmML", "glue", "googlesheets4", "gtable", "haven", "hms", "htmltools", "httpuv", "httr", "irlba", "jsonlite", "knitr", "leafem", "leaflet", "lifecycle", "lme4", "lubridate", "magrittr", "maptools", "mapview", "MASS", "Matrix", "matrixStats", "memoise", "mgcv", "mime", "minpack.lm", "mockery", "modelr", "mvtnorm", "ncdf4", "nlme", "nloptr", "nnet", "oce", "ocedata", "openssl", "openxlsx", "pillar", "pkgbuild", "pkgload", "plyr", "processx", "proxy", "ps", "raster", "RColorBrewer", "Rcpp", "RcppEigen", "readr", "readxl", "remotes", "reprex", "rerddap", "reshape", "rex", "rgdal", "rjson", "rlang", "rmarkdown", "roxygen2", "rpart", "rprojroot", "rstudioapi", "rversions", "rvest", "sass", "satellite", "scales", "seacarb", "servr", "sessioninfo", "sf", "shiny", "sitmo", "snow", "sp", "spam", "spatial", "statmod", "stringi", "stringr", "survival", "svglite", "systemfonts", "testthat", "tibble", "tidyr", "tidyselect", "tidyverse", "tinytex", "tzdb", "units", "usethis", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "webshot", "withr", "wk", "wql", "xfun", "xml2", "yaml", "zip", "zoo"))
library(readxl)
setwd("~/Documents/GitHub/CV_growth/data files")
sw = read_xlsx("data files/treatment monitoring.xlsx")
View(sw)
gro = read_xlsx("data files/CV mass data.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
boxplot(sw$T_c ~ sw$`Bucket#`)
boxplot(sw$pH ~ sw$`Bucket#`)
abline(h=7.8)
boxplot(sw$DO_sat ~ sw$`Bucket#`)
library(readxl)
library(dplyr) #create new dataframe
library(tidyr) #create new dataframe
library(lme4)
library(lme4)
library(seacarb)
library(lme4)
library(seacarb)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
setwd(dir = "/Users/alishamsaley/Documents/GitHub/Salinity-Carbonate-Chemistry-Decoupling/data/")
library(seacarb)
rawalk<-read.csv("alkforRaggregating.csv") #read in data, change file name according to date
names(rawalk)#check the column names
#rawalk$'Sample Type' is the sample ID
#fix class for variables
rawalk$Time.Analyzed = as.POSIXct(rawalk$Time.Analyzed, format = "%m/%d/%y %H:%M")
rawalk$date_analyzed = as.POSIXlt(rawalk$Time.Analyzed)
rawalk$Sample.Type = as.character(rawalk$Sample.Type)
rawalk$Corrected.Alkalinity = as.numeric(rawalk$Corrected.Alkalinity)
#function to correct based on DC
rawalk$day=1
dc.corr=function(date){
day=date
ind=which(rawalk$CRM.=="Pseudo Standard" & rawalk$day=="1")
ind2=which(rawalk$day=="1")
x=as.numeric(rawalk$Time.Analyzed[ind])
y=rawalk$Corrected.Alkalinity[ind]
plot(x,y)
corrfit.1=smooth.spline(x,y,spar=0.6)
lines(corrfit.1$x,corrfit.1$y)
correction=median(rawalk$Corrected.Alkalinity[ind][1:3])/predict(corrfit.1,as.numeric(rawalk$Time.Analyzed[ind2]),deriv=0)$y
return(rawalk$Corrected.Alkalinity[ind2]*correction)
}
rawalk$dc.corr.alk[which(rawalk$day==1)]=dc.corr(date=1)
rawalk$alkdiff = rawalk$Corrected.Alkalinity - rawalk$dc.corr.alk
plot(rawalk$alkdiff ~ rawalk$Time.Analyzed, pch = 19)
plot(rawalk$alkdiff ~ rawalk$Corrected.Alkalinity, pch = 19)
alk.median = as.data.frame(rawalk%>% group_by(`Sample.Type`) %>% dplyr::summarise(alk.med = median(`dc.corr.alk`)))
write.csv(alk.median,"alk.med.corrected.csv",row.names = F)
sw = read_xlsx("data files/treatment monitoring.xlsx")
setwd("~/Documents/GitHub/CV_growth/data files")
library(readxl)
sw = read_xlsx("data files/treatment monitoring.xlsx")
setwd("~/Documents/GitHub/CV_growth/data files")
setwd("/Users/alishamsaley/Documents/GitHub/CV_growth/data files")
library(readxl)
sw = read_xlsx("data files/treatment monitoring.xlsx")
sw = read_xlsx("treatment monitoring.xlsx")
gro = read_xlsx("CV mass data.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
sw = read_xlsx("treatment monitoring.xlsx")
gro = read_xlsx("CV mass data.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
sw = read_xlsx("treatment monitoring.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
sw = read_xlsx("treatment monitoring.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
sw = read_xlsx("treatment monitoring.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
boxplot(sw$T_c ~ sw$`Bucket#`)
boxplot(sw$pH ~ sw$`Bucket#`)
boxplot(sw$DO_sat ~ sw$`Bucket#`)
boxplot(sw$TA ~ sw$`Bucket#`)
setwd("/Users/alishamsaley/Documents/GitHub/CV_growth/data files")
library(readxl)
sw = read_xlsx("treatment monitoring.xlsx")
gro = read_xlsx("CV mass data.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
boxplot(sw$T_c ~ sw$`Bucket#`)
boxplot(sw$pH ~ sw$`Bucket#`)
boxplot(sw$DO_sat ~ sw$`Bucket#`)
boxplot(sw$TA ~ sw$`Bucket#`)
boxplot(sw$TA ~ sw$TA.treat)
boxplot(sw$S ~ sw$Sal.treat)
gro$CI = gro$gut.wt/gro$shell.wt
unique(gro$Plate)
pre = gro[gro$Plate == "pre",]
post = gro[gro$Plate == "post",]
grow = gro[gro$Plate == 1 | gro$Plate == 2 |gro$Plate == 3 | gro$Plate == 4| gro$Plate == 5 |gro$Plate == 6 | gro$Plate == 7| gro$Plate == 8| gro$Plate == 9| gro$Plate == 10| gro$Plate == 11| gro$Plate == 12,]
plot(pre$gut.wt ~ pre$shell.wt, pch = 19)
points(post$gut.wt ~ post$shell.wt, pch = 19, col = "blue")
points(grow$gut.wt ~ grow$shell.wt, col = as.factor(grow$TA.treat), pch = 19)
points(grow$gut.wt ~ grow$shell.wt, col = as.factor(grow$sal.treat), pch = 19)
plot(pre$gut.wt ~ pre$shell.wt, pch = 19)
boxplot(gro$gut.wt ~ gro$Plate)
boxplot(gro$shell.wt ~ gro$Plate)
boxplot(gro$gut.wt ~ gro$TA.treat)
boxplot(gro$gut.wt ~ gro$sal.treat)
boxplot(gro$shell.wt ~ gro$TA.treat)
boxplot(gro$shell.wt ~ gro$sal.treat)
boxplot(gro$CI ~ gro$TA.treat)
boxplot(gro$CI ~ gro$sal.treat)
summary(lm(gro$gut.wt ~ gro$TA.treat + gro$sal.treat))
summary(lm(gro$CI ~ gro$TA.treat + gro$sal.treat))
boxplot(gro$`%oc.ic.shell` ~ gro$TA.treat)
boxplot(gro$`%oc.ic.shell` ~ gro$sal.treat)
gro = read_xlsx("CV mass data.xlsx")
boxplot(sw$S ~ sw$`Bucket#`)
boxplot(sw$T_c ~ sw$`Bucket#`)
boxplot(sw$pH ~ sw$`Bucket#`)
boxplot(sw$DO_sat ~ sw$`Bucket#`)
boxplot(sw$TA ~ sw$`Bucket#`)
boxplot(sw$TA ~ sw$TA.treat)
boxplot(sw$S ~ sw$Sal.treat)
gro$CI = gro$gut.wt/gro$shell.wt
boxplot(gro$gut.wt ~ gro$TA.treat)
boxplot(gro$gut.wt ~ gro$sal.treat)
boxplot(gro$shell.wt ~ gro$TA.treat)
boxplot(gro$shell.wt ~ gro$sal.treat)
boxplot(gro$CI ~ gro$TA.treat)
boxplot(gro$CI ~ gro$sal.treat)
boxplot(gro$`%oc.ic.shell` ~ gro$TA.treat)
boxplot(gro$`%oc.ic.shell` ~ gro$TA.treat, ylim = c(-1,3))
boxplot(gro$`%oc.ic.shell` ~ gro$sal.treat, ylim = c(-1,3))
summary(lm(gro$gut.wt ~ gro$TA.treat + gro$sal.treat))
summary(lm(gro$CI ~ gro$TA.treat + gro$sal.treat))
summary(lm(gro$`%oc.ic.shell` ~ gro$TA.treat + gro$sal.treat))
summary(lm(gro$gut.wt ~ gro$TA.treat + gro$sal.treat))
