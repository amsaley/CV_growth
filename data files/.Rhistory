plot(gut.wt ~ T., pch = 19, data = dat[dat$dps == 36,])
plot(gut.wt ~ med.TA, pch = 19, data = dat[dat$dps == 36,])
plot(gut.wt ~ med.ta, pch = 19, data = dat[dat$dps == 36,])
abline(h=c(ave.post.gut, ave.post.gut))
plot((dat$gut.wt - ave.post.gut) ~ dat$med.ta)
plot((dat$gut.wt - ave.post.gut) ~ dat$med.ta, pch = 19)
boxplot((dat$gut.wt - ave.post.gut) ~ dat$med.ta, pch = 19)
plot((dat$gut.wt - ave.post.gut) ~ dat$med.ta, pch = 19)
plot((dat$gut.wt - ave.post.gut) ~ dat$med.S, pch = 19)
summary(lm((CI - ave.pre.ci) ~ factor(T.))
)
summary(lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36,])
)
lm((CI - ave.pre.ci) ~ factor(T.))
lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36,])
boxplot((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36,])
abline(h=0)
summary(lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36,]))
install.packages("multcomp")
install.packages("multcomp")
library(multcomp)
#now run a post hoc to see if CI is lower?
lm_model =  lm(CI - ave.pre.ci ~ factor(T.), data = dat[dat$dps == 36, ])
# Conduct pairwise comparisons of factor levels using Tukey's method
comparison <- glht(lm_model, linfct = mcp(T. = "Tukey"))
# Conduct pairwise comparisons of factor levels using Tukey's method
comparison <- glht(lm_model, linfct = mcp("T." = "Tukey"))
#now run a post hoc to see if CI is lower?
lm_model =  lm(CI - ave.pre.ci ~ factor(T.), data = dat[dat$dps == 36, ])
#now run a post hoc to see if CI is lower?
lm_model =  lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36, ])
# Conduct pairwise comparisons of factor levels using Tukey's method
comparison <- glht(lm_model, linfct = mcp(T. = "Tukey"))
# Conduct pairwise comparisons of factor levels using Tukey's method
posthoc <- emmeans(lm_model, ~ factor(T.), adjust = "tukey")
# Summarize the comparisons
summary(posthoc)
plot(posthoc)
dat$T.fac = as.factor(dat$T.)
# Conduct pairwise comparisons of factor levels using Tukey's method
comparison <- glht(lm_model, linfct = mcp(T. = "Tukey"))
#now run a post hoc to see if CI is lower?
lm_model =  lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36, ])
# Conduct pairwise comparisons of factor levels using Tukey's method
comparison <- glht(lm_model, linfct = mcp(T. = "Tukey"))
summary(lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36,]))
#now run a post hoc to see if CI is lower?
lm_model =  lm((CI - ave.pre.ci) ~ factor(T.), data = dat[dat$dps == 36, ])
# Conduct pairwise comparisons of factor levels using Tukey's method
# Load the emmeans package
install.packages("emmeans")
install.packages("emmeans")
library(emmeans)
# Conduct pairwise comparisons of factor levels using Tukey's method
posthoc <- emmeans(lm_model, ~ factor(T.), adjust = "tukey")
# Summarize the comparisons
summary(posthoc)
emmeans(lm_model, ~ factor(T.), adjust = "tukey")
plot(sw$S)
sw[sw$S > 31,]$ph.spec <- (0.0221*sw$pH.mV) + 6.6854
sw[sw$S > 31,]$ph.spec <- (0.0221*sw[sw$S > 31,]$pH.mV) + 6.6854
sw$ph.spec = NA
sw[sw$S > 31,]$ph.spec <- (0.0221*sw[sw$S > 31,]$pH.mV) + 6.6854
View(sw)
sw[sw$S > 31,]$ph.spec <- round((0.0221*sw[sw$S > 31,]$pH.mV) + 6.6854,2)
sw[sw$S < 31,]$ph.spec <- round((0.019*sw[sw$S > 31,]$pH.mV) + 6.7915,2)
sw[sw$S < 31,]$ph.spec <- round((0.019*sw[sw$S < 31,]$pH.mV) + 6.7915,2)
plot(sw$pH ~ sw$ph.spec)
abline(0,1)
carb(falg = 8, var1 = sw$ph.spec, var2 = sw$TA/16^6, T = sw$T_c, S = sw$S)
carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/16^6, T = sw$T_c, S = sw$S)
carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)
carb = carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)
plot(carb$pH ~ carb$OmegaCalcite)
sw$Om_a = carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$OmegaAragonite
sw$Om_c= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$OmegaCalcite
sw$DIC= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$DIC
sw$PCO2= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$PCO2
View(sw)
# Initialize an empty dataframe to store the results
final_result.pH <- data.frame(Bin = 1:14, med.pH = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
View(subset_data)
setwd("C:/Users/alish/OneDrive/Documents/GitHub/CV_growth/data files")
library(readxl)
library(lme4)
library(lmerTest)
sw = read_xlsx("treatment monitoring.xlsx")
mass = read_xlsx("CV mass data_V1.xlsx")
mass = mass[mass$CV_ID != "bucket 4" & mass$CV_ID != "bucket 6",]
mass$CI = mass$gut.wt/mass$shell.wt
mass$bucket = as.numeric(mass$`Bucket#`)
#code scores
#1 = blank tinfoil measurements
#2 = no gut but only shell weights
#3 = ID missing for CV
#4 = bad data
mass = mass[mass$code == 0,]
sa = read_xlsx("all SA growth data_V1.xlsx")
control = read_xlsx("control cv.xlsx")
#inputting another column for salinity
sw$ph.spec = NA
sw[sw$S > 31,]$ph.spec <- round((0.0221*sw[sw$S > 31,]$pH.mV) + 6.6854,2)
sw[sw$S < 31,]$ph.spec <- round((0.019*sw[sw$S < 31,]$pH.mV) + 6.7915,2)
#calculating the rest of sea carb using TA and pH measurements
carb = carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)
plot(carb$pH ~ carb$OmegaCalcite)
sw$Om_a = carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$OmegaAragonite
sw$Om_c= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$OmegaCalcite
sw$DIC= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$DIC
sw$PCO2= carb(flag = 8, var1 = sw$ph.spec, var2 = sw$TA/10^6, T = sw$T_c, S = sw$S)$PCO2
# Initialize an empty dataframe to store the results
final_result.TA <- data.frame(Bin = 1:14, med.TA = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_TA <- median(subset_data$TA)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.TA"] <- median_TA
}
# Print the final_result dataframe
print(final_result.TA)
# Initialize an empty dataframe to store the results
final_result.pH <- data.frame(Bin = 1:14, med.pH = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
sw$ph.spec = as.numeric(sw$ph.spec)
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
# Iterate over each Bin#
for (bin in c(1:6,8:13)) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_TA <- median(subset_data$TA)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.TA"] <- median_TA
}
# Print the final_result dataframe
print(final_result.TA)
# Iterate over each Bin#
for (bin in c(1:6,8:13)) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
sw2 = subset(sw,
`Bucket#` != 7,
`Bucket#`!= 14)
sw = sw2
# Initialize an empty dataframe to store the results
final_result.TA <- data.frame(Bin = 1:14, med.TA = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_TA <- median(subset_data$TA)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.TA"] <- median_TA
}
# Print the final_result dataframe
print(final_result.TA)
# Initialize an empty dataframe to store the results
final_result.pH <- data.frame(Bin = 1:14, med.pH = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- median(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
# Calculate the median temperature for the current Bin#
median_pH <- mean(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_pH <- mean(subset_data$ph.spec)
# Assign the median value to the corresponding row in the final result dataframe
final_result.TA[final_result.TA$Bin == bin, "med.pH"] <- median_pH
}
# Print the final_result dataframe
print(final_result.pH)
# Print the final_result dataframe
print(final_result.TA)
# Print the final_result dataframe
print(final_result.pH)
# Print the final_result dataframe
print(final_result.TA)
# Initialize an empty dataframe to store the results
final_result.T <- data.frame(Bin = 1:14, med.T = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_T <- median(subset_data$T_c)
# Assign the median value to the corresponding row in the final result dataframe
final_result.T[final_result.T$Bin == bin, "med.T"] <- median_T
}
# Print the final_result dataframe
print(final_result.T)
# Initialize an empty dataframe to store the results
final_result.S <- data.frame(Bin = 1:14, med.S = numeric(14))
# Iterate over each Bin#
for (bin in 1:14) {
# Subset data for the current Bin#
subset_data <- sw[sw$`Bucket#` == bin, ]
# Calculate the median temperature for the current Bin#
median_S <- median(subset_data$S)
# Assign the median value to the corresponding row in the final result dataframe
final_result.S[final_result.S$Bin == bin, "med.S"] <- median_S
}
# Print the final_result dataframe
print(final_result.S)
######Merging them all together:
final_result.CC = merge(final_result.TA,final_result.pH, by =  "Bin")
final_result.sw = merge(final_result.T,final_result.S, by =  "Bin")
sw.med = as.data.frame(merge(final_result.CC,final_result.sw, by = "Bin"))
# Initialize empty columns for median values in the 'mass' dataframe
mass$med.ta <- NA
mass$med.pH <- NA
mass$med.S <- NA
mass$med.T <- NA
# Loop through bins 1 to 14
for (bin in 1:14) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
# Loop through bins 1 to 14
for (bin in 1:13) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
sw.med = as.data.frame(merge(final_result.CC,final_result.sw, by = "Bin"))
View(sw.med)
# Initialize empty columns for median values in the 'mass' dataframe
mass$med.ta <- NA
mass$med.pH <- NA
mass$med.S <- NA
mass$med.T <- NA
sw.med = subset(sw.med,
Bin != 7,
Bin != 14)
# Loop through bins 1 to 14
for (bin in 1:13) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
# Loop through bins 1 to 14
for (bin in 1:14) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
View(sw.med)
sw.med = subset(sw.med,
Bin != 7,
Bin != 14)
unique(sw.med$Bin)
sw.med = subset(sw.med,
Bin != 7 &
Bin != 14)
sw.med = subset(sw.med,
Bin != 7 &
Bin != 14)
# Loop through bins 1 to 14
for (bin in 1:14) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
median_pH <- sw.med[sw.med$Bin == bin, "med.pH.x"]
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH.x"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
# Loop through bins 1 to 14
for (bin in 1:14) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH.x"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
# Loop through bins 1 to 14
for (bin in 1:14) {
# Filter 'sw.med' for the current bin and get the median TA
median_ta <- sw.med[sw.med$Bin == bin, "med.TA"]
median_pH <- sw.med[sw.med$Bin == bin, "med.pH.x"]
median_T <- sw.med[sw.med$Bin == bin, "med.T"]
median_S <- sw.med[sw.med$Bin == bin, "med.S"]
# Assign the median TA to the corresponding 'mass' rows based on Bucket#
mass$med.ta[mass$`Bucket#` == bin] <- median_ta
mass$med.pH[mass$`Bucket#` == bin] <- median_pH
mass$med.T[mass$`Bucket#` == bin] <- median_T
mass$med.S[mass$`Bucket#` == bin] <- median_S
}
mass.full = mass #saving as a full df in case I need to reference after subsetting
View(mass.full)
#omitting controls
mass = mass[mass$med.S > 0 & mass$med.ta > 0,]
sa.proc = sa[sa$dps == 0 | sa$dps == 18 | sa$dps == 36,]
library(dplyr)
growth_rate = sa.proc %>%
# first sort by year
group_by(CV_ID) %>%
mutate(Diff_time = date.numb - lag(date.numb),  # Difference in time (just in case there are gaps)
Diff_growth = SA.mm2.RE - lag(SA.mm2.RE),
Net_growth.d = ((SA.mm2.RE - SA.start)/(dps)),
incr_growth.d = (Diff_growth/Diff_time),
Net_growth.w = Net_growth.d * 7,
incr_growth.w = (Diff_growth/Diff_time)*7,
Net_growth = (SA.mm2.RE - SA.start)
)
full = merge(growth_rate, mass, by = "CV_ID")
dat1 = subset(full,
Net_growth > -50,
`%oc.ic.shell` > 0)
dat.ids = unique(dat[dat$dps == 36,]$CV_ID)
dat = subset(full,
Net_growth > -50,
`%oc.ic.shell` > 0)
dat.ids = unique(dat[dat$dps == 36,]$CV_ID)
# Subset dat dataframe based on CV_ID being in dat.ids
subset_dat <- dat[dat$CV_ID %in% dat.ids, ]
unique(subset_dat$CV_ID)
#full$SA.start < 250 &
dat$TA.treat.x = as.factor(dat$TA.treat.x)
write.csv(dat, file = "dat.processed.csv", row.names = F) #WILL USE THIS DF FOR MODELING IN OTHER R MARKDOWN FILE
write.csv(subset_dat, file = "dat.processed.csv", row.names = F) #WILL USE THIS DF FOR MODELING IN OTHER R MARKDOWN FILE
dat = subset_dat
plot(control$shell.wt ~ control$SA.mm2, pch = 19, col = as.factor(control$Plate))
plot(control$shell.wt ~ control$gut.wt, pch = 19, col = as.factor(control$Plate))
control$CI = control$gut.wt/control$shell.wt
boxplot(control$CI ~ control$Plate) #CI went down in controls; potentially indicating that oysters were in a phase of producing less shell, using tissue reserves (dormancy?) and that food + our temp was not warm enough to wake them up fully.
ave.pre.gut = mean(control[control$Plate == "pre",]$gut.wt)
ave.post.gut = mean(control[control$Plate == "post",]$gut.wt)
ave.pre.ci = mean(control[control$Plate == "pre",]$CI)
ave.post.ci = mean(control[control$Plate == "post",]$CI)
ave.pre.sa.mm2 = mean(control[control$Plate == "pre",]$SA.mm2)
ave.post.sa.mm2 = mean(control[control$Plate == "post",]$SA.mm2)
boxplot(SA.mm2 ~ sal.treat.x + TA.treat.x, dat = dat[dat$dps == 36,])
abline(h = c(ave.pre.sa.mm2), lwd = 2, lty = 2)
boxplot(CI ~ sal.treat.x + TA.treat.x, dat = dat[dat$dps == 36,], ylim = c(0.005,0.029))
abline(h = c(ave.pre.ci), lwd = 2, lty = 2)
boxplot(gut.wt ~ sal.treat.x + TA.treat.x, dat = dat[dat$dps == 36,], ylim = c(0.005,0.029))
boxplot(gut.wt ~ sal.treat.x + TA.treat.x, dat = dat[dat$dps == 36,])
#adding in omega column
dat$med.omC = carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaCalcite
carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaCalcite
#adding in omega column
dat$med.omC = carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaCalcite
dat$med.omA = carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaAragonite
plot(dat$mort ~ dat$med.ta)
dat$T. = 0
dat[dat$sal.treat.x == "amb" & dat$TA.treat.x == "1000",]$T. <- "T1"
dat[dat$sal.treat.x == "amb" & dat$TA.treat.x == "2000",]$T. = "T2"
dat[dat$sal.treat.x == "amb" & dat$TA.treat.x == "3000",]$T. = "T3"
dat[dat$sal.treat.x == "low" & dat$TA.treat.x == "1000",]$T. = "t1"
dat[dat$sal.treat.x == "low" & dat$TA.treat.x == "2000",]$T. = "t2"
dat[dat$sal.treat.x == "low" & dat$TA.treat.x == "3000",]$T. = "t3"
nT1 = 83 #(unique(dat[dat$T. == "T1",]$CV_ID))
nT2 = 93 #unique(dat[dat$T. == "T2",]$CV_ID)
nT3 = 90 #unique(dat[dat$T. == "T3",]$CV_ID)
nt1 = 77 #unique(dat[dat$T. == "t1",]$CV_ID)
nt2 = 93 #unique(dat[dat$T. == "t2",]$CV_ID)
nt3 = 86 #unique(dat[dat$T. == "t3",]$CV_ID)
dat$nrow = 0
dat[dat$T. == "T1",]$nrow <- nT1
dat[dat$T. == "T2",]$nrow <- nT2
dat[dat$T. == "T3",]$nrow <- nT3
dat[dat$T. == "t1",]$nrow <- nt1
dat[dat$T. == "t2",]$nrow <- nt2
dat[dat$T. == "t3",]$nrow <- nt3
mort = dat %>%
# first sort by year
group_by(T.) %>% summarise(mort = (49*2) - mean(nrow),mort.frac = mort/(49*2), ave.tiss = mean(gut.wt), ave.net.d = mean(Net_growth.d))
dat$mort = NA
dat[dat$T. == "T1",]$mort <- mort[mort$T. == "T1",]$mort.frac
dat[dat$T. == "T2",]$mort <- mort[mort$T. == "T2",]$mort.frac
dat[dat$T. == "T3",]$mort <- mort[mort$T. == "T3",]$mort.frac
dat[dat$T. == "t1",]$mort <- mort[mort$T. == "t1",]$mort.frac
dat[dat$T. == "t2",]$mort <- mort[mort$T. == "t2",]$mort.frac
dat[dat$T. == "t3",]$mort <- mort[mort$T. == "t3",]$mort.frac
dat$ave.tiss = NA
dat[dat$T. == "T1",]$ave.tiss <- mort[mort$T. == "T1",]$ave.tiss
dat[dat$T. == "T2",]$ave.tiss <- mort[mort$T. == "T2",]$ave.tiss
dat[dat$T. == "T3",]$ave.tiss <- mort[mort$T. == "T3",]$ave.tiss
dat[dat$T. == "t1",]$ave.tiss <- mort[mort$T. == "t1",]$ave.tiss
dat[dat$T. == "t2",]$ave.tiss <- mort[mort$T. == "t2",]$ave.tiss
dat[dat$T. == "t3",]$ave.tiss <- mort[mort$T. == "t3",]$ave.tiss
#adding in omega column
dat$med.omC = carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaCalcite
dat$med.omA = carb(flag = 8, var1 = dat$med.pH, var2 = dat$med.ta/10^6, T = dat$med.T, S = dat$med.S)$OmegaAragonite
plot(dat$mort ~ dat$med.ta)
plot(dat$mort ~ dat$med.S)
plot(dat$mort ~ dat$med.omC)
plot(dat$mort ~ dat$med.omA)
plot(dat$med.ta ~ dat$med.omC)
View(dat)
plot(dat$med.ta ~ dat$med.omC, col = as.factor(dat$sal.treat.x))
plot(dat$Net_growth.d ~ dat$med.omC)
plot(dat$Net_growth.d ~ dat$med.omC, col = as.factor(dat$sal.treat.x))
plot(dat$Net_growth.d ~ dat$med.S, col = as.factor(dat$sal.treat.x))
